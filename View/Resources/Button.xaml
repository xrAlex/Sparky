<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="ButtonChangableBackgroundOpacity" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name ="gr">
                        <Border 
                                CornerRadius="5"
                                UseLayoutRounding="True"
                                SnapsToDevicePixels="True"
                                Background="{TemplateBinding Background}">
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="1" Opacity="0.3"/>
                            </Border.Effect>
                        </Border>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Button.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.15" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RotaryButton" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform CenterX="0.5" CenterY="0.5" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name ="border" 
                        CornerRadius="100" 
                        Background="{StaticResource TLightGray}">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=border}" Value="True">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="1" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"/>
                                        <DoubleAnimation Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)" To="30" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"/>
                                        <DoubleAnimation Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentButton" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeepGrayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonChangableBackgroundOpacity}">
        <Setter Property="Background" Value="{StaticResource TDeepGray}"/>
    </Style>

    <Style x:Key="LightGrayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonChangableBackgroundOpacity}">
        <Setter Property="Background" Value="{StaticResource TLightGray}"/>
    </Style>

    <Style x:Key="BlackButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonChangableBackgroundOpacity}">
        <Setter Property="Background" Value="{StaticResource TLightBlack}"/>
    </Style>

    <Style x:Key="GrayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonChangableBackgroundOpacity}">
        <Setter Property="Background" Value="{StaticResource TGray}"/>
    </Style>

</ResourceDictionary>